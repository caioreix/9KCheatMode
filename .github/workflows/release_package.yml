name: Release Package

on:
  release:
    types: [published, edited]
  workflow_dispatch:
    inputs:
      tag_name:
        required: true
        description: The tag to release.
        type: string

env:
  GH_USER: ${{ secrets.GH_USER }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  RELEASE_TAG: ${{ github.event.inputs.tag_name || github.event.release.tag_name }}

jobs:
  validate:
    if: |
      github.repository != 'caioreix/bepinex-template'
      github.event_name == 'workflow_dispatch' ||
      github.event.action == 'published' ||
      (github.event.action == 'edited' && github.event.release.prerelease == false)
    name: Validate
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get the last release tag
        id: get_last_release
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "LAST_TAG=${LAST_TAG}" >> $GITHUB_ENV
          echo "::set-output name=last_tag::${LAST_TAG}"

      - name: Trim 'v' prefix from RELEASE_TAG and LAST_TAG if it exists
        run: |
          TRIMMED_RELEASE_TAG=$(echo ${{ env.RELEASE_TAG }} | sed 's/^v//')
          echo "RELEASE_TAG=${TRIMMED_RELEASE_TAG}" >> $GITHUB_ENV
          TRIMMED_LAST_TAG=$(echo ${{ env.LAST_TAG }} | sed 's/^v//')
          echo "LAST_TAG=${TRIMMED_LAST_TAG}" >> $GITHUB_ENV

      - name: Check if LAST_TAG equals RELEASE_TAG
        if: github.event.action == 'edited'
        run: |
          if [ ${{ env.LAST_TAG }} != ${{ env.RELEASE_TAG }} ]; then
            echo "Error: LAST_TAG (${{ env.LAST_TAG }}) does not match RELEASE_TAG (${{ env.RELEASE_TAG }})"
            exit 1
          fi

      - name: Download Release
        run: gh release download v${{ env.RELEASE_TAG }} -D ./dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./dist/*.nupkg

  github:
    name: Publish Github Package
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v3

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./dist

      - name: Publish
        run: dotnet nuget push "./dist/*.nupkg" --api-key ${{ secrets.GH_TOKEN }} --source "https://nuget.pkg.github.com/caioreix/index.json"

  nuget:
    name: Publish NuGet Package
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
      - uses: actions/checkout@v3

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./dist

      - name: Publish
        run: dotnet nuget push "./dist/*.nupkg" --api-key ${{ secrets.NUGET_TOKEN }} --source "https://api.nuget.org/v3/index.json"
